{"version":3,"sources":["plugins/fetchPlugin.ts","components/Editor.tsx","index.tsx","plugins/unpkgPathPlugin.ts"],"names":["fileCache","localforage","createInstance","name","fetchPlugin","inputCode","setup","build","onLoad","filter","loader","contents","args","a","getItem","path","cachedResult","axios","get","data","request","escaped","replace","result","resolveDir","URL","responseURL","pathname","setItem","Editor","onChange","initialValue","editor","useRef","onClick","unformatted","current","getModel","getValue","formatted","prettier","format","parser","plugins","useTabs","semi","singleQuote","setValue","editorDidMount","monacoEditor","onDidChangeModelContent","updateOptions","tabSize","value","theme","language","height","options","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout","App","serviceRef","iframe","useState","input","setInput","startService","esbuild","worker","wasmURL","useEffect","srcdoc","html","entryPoints","bundle","write","onResolve","namespace","href","define","global","contentWindow","postMessage","outputFiles","text","e","target","title","ref","sandbox","srcDoc","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.2eb23afc.chunk.js","sourcesContent":["import * as esbuild from 'esbuild-wasm';\nimport axios from 'axios';\nimport localforage from 'localforage';\n\nconst fileCache = localforage.createInstance({\n  name: \"fileCache\"\n});\n\nexport const fetchPlugin = (inputCode: string) => {\n  return {\n    name: 'fetch-plugin',\n    setup(build: esbuild.PluginBuild) {\n       build.onLoad( {filter: /(^index\\.js$)/}, () => {\n        return {\n                loader: 'jsx',\n                contents: inputCode\n              };\n\n       });\n\n       build.onLoad({filter: /.*/},async (args: any) => {\n          const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\n           if(cachedResult){\n               return cachedResult;\n           }\n       });\n\n       build.onLoad({filter: /.css$/},async(args: any) => {\n          const { data, request } = await axios.get(args.path);\n          const escaped = data.replace(/\\n/g, '')\n                .replace(/\"/g, '\\\\\"')\n                .replace(/'/g, \"\\\\'\")\n          const contents = `\n            const style = document.createElement('style');\n            style.innerText = '${escaped}';\n            document.head.appendChild(style);\n          `;\n\n          const result:esbuild.OnLoadResult = {\n            loader: \"jsx\",\n            contents,\n            resolveDir: new URL('./', request.responseURL).pathname\n          };\n          await fileCache.setItem(args.path, result);\n          return result;\n\n       });\n       build.onLoad({ filter: /.*/ }, async (args: any) => {\n          const { data, request } = await axios.get(args.path);\n\n          const result:esbuild.OnLoadResult = {\n            loader: \"jsx\",\n            contents: data,\n            resolveDir: new URL('./', request.responseURL).pathname\n          };\n          await fileCache.setItem(args.path, result);\n          return result;\n      });\n    }\n  }\n}\n","import CodeEditor, {EditorDidMount} from '@monaco-editor/react'\nimport React, {useRef} from 'react'\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange(value: string) : void\n}\n\nconst Editor: React.FC<CodeEditorProps> = ({onChange, initialValue}) => {\n        const editor = useRef<any>();\n        const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n                editor.current = monacoEditor;\n                monacoEditor.onDidChangeModelContent(() => {\n                 onChange(getValue());\n                });\n                monacoEditor.getModel()?.updateOptions({tabSize: 2});\n        }\n        const onFormatClick = () => {\n            // get the current value from the editor\n            const unformatted = editor.current.getModel()?.getValue();\n            // format that value\n            const formatted = prettier.format(unformatted, {\n                parser: 'babel',\n                plugins: [parser],\n                useTabs: false,\n                semi: true,\n                singleQuote: true\n            });\n            // set the formatted value to the editor\n            editor.current.setValue(formatted);\n        }\n        return (\n                <div>\n                  <button onClick={onFormatClick}>Format</button>\n                <CodeEditor\n                editorDidMount={onEditorDidMount}\n                value = {initialValue}\n                theme=\"dark\"\n                language=\"javascript\"\n                height=\"500px\"\n                options = {{\n                        wordWrap: 'on',\n                        minimap: {enabled: false},\n                        showUnused: false,\n                        folding: false,\n                        lineNumbersMinChars: 3,\n                        fontSize: 16,\n                        scrollBeyondLastLine: false,\n                        automaticLayout: true\n                    }}\n                />\n                </div>\n        );\n\n}\n\nexport default Editor;\n","import ReactDOM from 'react-dom';\nimport React, {useEffect, useRef, useState} from 'react';\nimport * as esbuild from \"esbuild-wasm\";\nimport { unpkgPathPlugin } from './plugins/unpkgPathPlugin';\nimport { fetchPlugin } from './plugins/fetchPlugin';\nimport Editor from './components/Editor';\n\nconst App: React.FC = () => {\n    const serviceRef = useRef<any>();\n    const iframe = useRef<any>();\n    const [input, setInput] = useState('');\n\n    const startService = async () => {\n        serviceRef.current = await esbuild.startService(\n            {\n                worker: true,\n                wasmURL: \"https://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm\"\n            }\n        );\n    }\n    useEffect(() => {\n        startService();\n    }, []);\n    const onClick = async () => {\n        if(!serviceRef.current){\n            return;\n        }\n        iframe.current.srcdoc = html;\n        const result = await serviceRef.current.build({\n            entryPoints: ['index.js'],\n            bundle: true,\n            write: false,\n            plugins: [\n                unpkgPathPlugin(),\n                fetchPlugin(input)\n            ],\n            define: {\n                \"process.env.NODE_ENV\":'\"production\"',\n                global: 'window'\n            }\n        })\n        iframe.current.contentWindow.postMessage(result.outputFiles[0].text, '*')\n       // setCode(result.outputFiles[0].text);\n    }\n    const html = `\n        <html>\n        <head></head>\n        <body>\n            <div id=\"root\"></div>\n            <script>\n                window.addEventListener('message', (event) => {\n                try {\n                  eval(event.data);\n                } catch (err){\n                  const root = document.querySelector(\"#root\");\n                  root.innerHTML = '<div style = \"color: red;\" ><h4>RunTimeError:</h4>'+ err +'</div>';\n                  console.error(err);\n                }\n                }, false);\n            </script>\n        </body>\n        </html>\n    `\n    return (\n        <div>\n            <div>\n                <textarea onChange = { e =>  setInput(e.target.value)}></textarea>\n            </div>\n            <button onClick={onClick}>Submit</button>\n            <br />\n            <div>\n                <Editor onChange={ (value) => setInput(value) }initialValue=\"const a  = 1;\"/>\n                <iframe  title=\"preview\" ref={iframe} sandbox=\"allow-scripts\" srcDoc={html}/>\n            </div>\n        </div>\n    );\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"))\n","import * as esbuild from 'esbuild-wasm';\nexport const unpkgPathPlugin = () => {\n  return {\n    name: 'unpkg-path-plugin',\n    setup(build: esbuild.PluginBuild) {\n      build.onResolve({filter: /(^index\\.js$)/},(args: any) => {\n          return { path: args.path, namespace: 'a'}\n      });\n      build.onResolve({filter: /^\\.+\\//}, (args: any) => {\n          return {\n            namespace: 'a',\n            path: new URL(args.path, \"https://unpkg.com\" + args.resolveDir +  '/').href\n          }\n\n      });\n      build.onResolve({ filter: /.*/ }, async (args: any) => {\n        return {\n          namespace: 'a',\n          path: `https://unpkg.com/${args.path}`\n        }\n      });\n\n    },\n  };\n};\n"],"sourceRoot":""}